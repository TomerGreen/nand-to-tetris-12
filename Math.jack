
class Math {
	static Array twoToThe;

    /** Initializes the library. */
    function void init() {
		let twoToThe = Array.new(16);
		let twoToThe[0] = 1;
		let twoToThe[1] = 2;
		let twoToThe[2] = 4;
		let twoToThe[3] = 8;
		let twoToThe[4] = 16;
		let twoToThe[5] = 32;
		let twoToThe[6] = 64;
		let twoToThe[7] = 128;
		let twoToThe[8] = 256;
		let twoToThe[9] = 512;
		let twoToThe[10] = 1024;
		let twoToThe[11] = 2048;
		let twoToThe[12] = 4096;
		let twoToThe[13] = 8192;
		let twoToThe[14] = 16384;
		let twoToThe[15] = 16384+16384;
		return;
    }
	
	function int powerOfTwo(int j){
		if((j>-1)&(j<16)){
			return twoToThe[j]; 
			}
		return 0;
		}	
	
	function boolean bit(int x, int j){
		var boolean flag;
		let flag = x & twoToThe[j];
		if (flag){
			return true;
			}
		return false;
	}
	
    /** Returns the absolute value of x. */
    function int abs(int x) {
		if (x<0){
			let x = -x;
			return x;
		}
		return x;
    }

	
	function boolean isSameSighn(int x, int y){
		if (x<0 & y<0){
			return true;
			}
		if (x>0 & y>0){
			return true;
			}
		return false;
	}
	
	function int mulByTwo(int num){
		return num+ num;
		}
		
    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
		var int sum;
		var int shiftedX;
		var int i;
		var boolean bitFlag;
		var boolean SameSighn;
		let sum = 0;
		let shiftedX = x;
		let i = 0;			
		while (i < 16){
			
			let bitFlag = Math.bit(y, i);
			if (bitFlag){
				let sum = sum + shiftedX;
			}
			let shiftedX = Math.mulByTwo(shiftedX);
			let i = i + 1;
		}
		return sum;

    }
	
	
    /** Returns the integer part of the square root of x. */
	function int sqrt(int x) {
		var int y;
		var int beforSqrt;
		var int i,j;
		
		if (x<0){
			do Sys.error(4);
		}
		let y = 0; 
		let i =7;
		let j=0;
		
		while (j<8){
			let beforSqrt = Math.multiply(y + twoToThe[i],y + twoToThe[i]);
			if (~(beforSqrt> x)&(beforSqrt>0)){
				let y = y + twoToThe[i];
			}
			let i= i-1;
			let j=j+1;
		}
		return y;
	}

    /** Returns the greater number. */
    function int max(int x, int y) {
		if (x > y){
			return x;
		}
		return y;
    }

    /** Returns the smaller number. */
    function int min(int x, int y) {
		if (x < y){
			return x;
		}
		return y;
		}
	

	/** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
		var int q;
		var bool SameSighn;
				
		if (y <0){
			return 0;
			}
		
		let SameSighn = Math.isSameSighn(x,y);
		let x = Math.abs(x);
		let y = Math.abs(y);
		let q = Math.divideHelper(x,y);
		if (SameSighn){
			return q;
		}
		
		let q = -q;
		
		return q;
	}
			
	function int divideHelper(int x, int y){
		var int q;
		var int qMuly;
		var int twoq;
		var int z;
		
		if ((y>x)|(y<0)){
			return 0;
		}


		let q = Math.divideHelper(x,y+y);
		let twoq =  Math.mulByTwo(q);
		let qMuly = Math.multiply(twoq,y);
		let z = x-qMuly;
		if (z<y){
			return twoq;
			}	
		let twoq = twoq +1;
		
		return twoq;
	}
	

	
}

  