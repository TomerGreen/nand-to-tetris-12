// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static int freeList;
    static Array ram;
    
    /** Initializes the class. */
    function void init() {
        let ram = 0;
		let freeList = 2048;
        let freeList[0] = 0;
        let freeList[1] = 14331;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }
	   /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
		var int block;
		var int newBlock;
		var int newSize;
        if (size < 1){
            do Sys.error(5);
        }
		
		let block = Memory.firstFit(size);
		if (block = 0){
			return 0;
			}
		let newBlock = block +2+ block[1] -(size+2);
		let newSize = block[1] - (size+2);

		let newBlock[1] = size;
		do Memory.poke(newBlock,newBlock+2);

		let block[1] = newSize;
		
		return newBlock;
    }

	
	function int firstFit(int size){
		var int curBlock;
		var int curBlockSize;
		var int nextBlock;
		
		let curBlock = freeList;

		while (~(curBlock=0)){
			let curBlockSize = curBlock[1];
			if (curBlockSize+1>size+2){
				return curBlock;
				}
			let nextBlock = curBlock[0];	
			let curBlock = nextBlock;
			}
		return 0;
	}
		
    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array object) {		
        var int next;
		
        let next = freeList[0];
		
		let object = object-2;
		
        let freeList[0] = object;
        let object[0] = next;
        return;
    }    
}
