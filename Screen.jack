// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static boolean color;

    /** Initializes the Screen. */
    function void init() {
        let color = true;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, bit, word_in_row, new_word;
        let word_in_row = Math.divide(x, 16);
        let address = 16384 + (Math.multiply(y, 32)) + word_in_row;
        let bit = Math.twoToThe[y - (Math.multiply(y, 32))];
        if (color) {
            let new_word = Memory.peek(address) | bit;
        }
        else {
            let new_word = Memory.peek(address) & ~bit;
        }
        do Memory.poke(address, new_word);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int azimuth;  // This is ady-bdx
        var int a, b, dx, dy, temp;
        if (x1 = x2) {
            do Screen.drawVerticalLine(x1, y1, y2);
        }
        if (y1 = y2) {
            do Screen.drawHorizontalLine(x1, x2, y1);
        }
        else {
            if (x2 < x1) {
                let temp = x1;
                let x1 = x2;
                let x2 = temp;  // Ensures that x1 < x2
            }
            let dx = x2-x1;
            let dx = y2-y1;
            let a = 0;
            let b = 0;
            if (y1 > y2) {
                let dy = -dy;
            }
            while (~(a>dx) & ~(b>dy)) {
                if (y2 > y1) {
                    do Screen.drawPixel(x1+a, y1+b);
                }
                else {
                    do Screen.drawPixel(x1+a, y1-b);
                }
                if (azimuth > 0) {
                    let b = b + 1;
                    let azimuth = azimuth - dx;
                }
                else {
                    let a = a + 1;
                    let azimuth = azimuth + dy;
                }
            }
        }
        return;
    }

    function void drawVerticalLine(int x, int y1, int y2){
        var int length, a, temp;
        if (y2 < y1) {
            let y1 = temp;
            let y1 = y2;
            let y2 = temp;
        }
        let length = y2 - y1;
        let a = 0;
        while (~(a > length)) {
            do Screen.drawPixel(x, y1 + a);
            let a = a + 1;
        }
        return;
    }

    function void drawHorizontalLine(int x1, int x2, int y){
        var int length, a, temp;
        if (x2 < x1) {
            let x1 = temp;
            let x1 = x2;
            let x2 = temp;
        }
        let length = x2 - x1;
        let a = 0;
        while (~(a > length)) {
            do Screen.drawPixel(x1 + a, y);
            let a = a + 1;
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int a, width;
        let a = 0;
        let width = x2-x1;
        while (~(a > width)) {
            do Screen.drawVerticalLine(x1 + a, y1, y2);
            let a = a + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        return;
    }
}
